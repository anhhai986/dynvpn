#!/usr/bin/env python

from sys import argv
import os
from globs import Global_vars, Openvpn_incoming_var
import syslog
import subprocess

this_glob = Global_vars()
ovpn_vars = Openvpn_incoming_var()


def input_variable_check():
    if len(argv) < 3:
        logger("Error: too few arguments")
        print("usage:", argv[0], "[ add | update | delete ] ip username")
        exit(1)

    if argv[1] != "add" and argv[1] != "update" and argv[1] != "delete":
        logger("no valid action specififed")
        exit(1)

    ovpn_vars.action = argv[1]
    ovpn_vars.ip = argv[2]

    # the third argument (user) is not passed when an action is DELETE
    # so we make sure not to set it if this is the hook scenario

    if not ovpn_vars.action == "delete":
        ovpn_vars.user = argv[3]


def run_fw_action(action, ip):
    """ Do an add|delete|update action
    depending on what state the client is in"""

    if action == "add":
        logger("Add Action Triggered, applying rules")
        user_acl = lookup_fw_acl(ip)
        save_user_ip(ip, user_acl)

    elif action == "delete":
        logger("Delete Action Triggered, flushing rules")
        delete_user_chain(ip)
        remove_file(this_glob.USER_SESSION_PATH + ip + ".session")

    elif action == "update":
        logger("Update Action Triggered, flushing rules")
        delete_user_chain(ip)
        lookup_fw_acl(ip)


def get_user_from_ip(ip):
    """ lookup user based on ip """
    logger("looking up user based on ip:" + ip)
    temp = read_file(this_glob.USER_SESSION_PATH + ip + ".session")

    temp = temp[0]
    ovpn_vars.user = temp.split(":")[0]
    logger("matched ip: " + ip + "to user:" + ovpn_vars.user)
    # we need some error handling here, what if there is no session
    # for the user?


def save_user_ip(ip, user_acl):
    """ The action delete does not pass what vpn user that is disconnected
    so we need to keep  and lookup between user & ip
    """
    f = open(this_glob.USER_SESSION_PATH + ip + ".session", 'w')
    f.write(ovpn_vars.user + " " + " ".join(user_acl))
    f.close()


def apply_fw_acl(ip, acl):
    # We should throw an exception if no such rule file exist
    subprocess.call([this_glob.ACL_RULES_PATH + acl, ip,
                     ovpn_vars.user])


def read_file(file):
    try:
        f = open(file, 'r')
        return f.readlines()
    except IOError:
        logger("could not open file:" + file)
        exit(1)

def remove_file(filepath):
    try:
        os.remove(filepath)
    except OSError:
        pass

def lookup_fw_acl(ip):
    """ Given an openvpn client connect. Look up user
    to find the acl rule to apply """
    fw_acl = {}
    user = ""
    user_groups = []

    # we should have an exception here if the acl file does
    # not exist
    acl_file = read_file(this_glob.ACL_MEMBER_FILE)
    this_glob.USER_ACL = acl_file

    for user_entry in acl_file:
        user = user_entry.split(" ")[0]
        if user == ovpn_vars.user:
            user_groups = user_entry.split(" ")[1:]

            logger("parsing acl file for user:" + ovpn_vars.user)
            logger("user:" + user)
            logger("group:" + str(user_groups))
            logger("ovpnvar_user:" + ovpn_vars.user)

            fw_acl[user] = user_groups
    try:
        user_acls = fw_acl[ovpn_vars.user]
    except:
        logger("no ACL to apply to vpn user")
        exit(1)

    # before applying each ACL
    # wipe any lingering nftables fwrules for this sessions IP and log it
    if user_chain_exists(ip):
        logger(" old ruleset for IP found, flushing old rules")
        delete_user_chain(ip)
        create_user_chain(ip)
    else:
        create_user_chain(ip)

    for acl in user_acls:
        logger("applying acl " + acl + " for user: " + user)
        acl = acl.strip()
        apply_fw_acl(ip, acl)

    return user_groups


def user_chain_exists(ip):
    """ Checks if user chain exists in nftables along with a jump reference
    to it in FORWARD chain"""
    forward = subprocess.check_output(['/usr/sbin/nft', '-a', 'list',
                                       'chain', 'filter', 'forward'])
    for row in forward:
        if ip in row:
            return True
    return False


def flush_user_chain(ip):
    """ remove all rules for the connecting user IP """
    logger("flushing user chain")
    subprocess.call(['/usr/sbin/nft', 'flush', 'chain', 'filter', ip])


def delete_user_chain(ip):
    """ removes the custom chain for the IP """
    logger("deleting user chain")
    # user chain cannot be removed before all refereces to it are gone
    flush_user_chain(ip)

    # remove reference in forward chain to custom rule
    forward = subprocess.Popen(['/usr/sbin/nft', '-a', 'list', 'chain',
                                'filter', 'forward'],
                               stdout=subprocess.PIPE).communicate()[0]
    for row in forward.split("\n"):
        if ip in row:
            rule_number = str(row.split("handle")[1]).strip()
            subprocess.call(['/usr/sbin/nft', 'delete', 'rule', 'filter',
                             'forward', 'handle', rule_number])
    # remove custom rule chain
    subprocess.call(['/usr/sbin/nft', 'delete', 'chain', 'ip', 'filter', ip])


def create_user_chain(ip):
    # create a custom nftables chain
    subprocess.call(['/usr/sbin/nft', 'add', 'chain', 'ip',
                     'filter', ip])
    # create a jump point to this table for the ip in FORWARD chain
    subprocess.call(['/usr/sbin/nft', 'add', 'rule', 'filter', 'forward', 'ip',
                     'saddr', ip, 'jump', ip])


def logger(input):
    """ Wrapper function for logging to syslog """
    if this_glob.DEBUG:
        if type(input) == list:
            input = str(input)
            syslog.syslog(input)


def main():
    input_variable_check()

    # make sure path for session files exist
    if not(os.path.exists(this_glob.USER_SESSION_PATH)):
        os.makedirs(this_glob.USER_SESSION_PATH)

    run_fw_action(ovpn_vars.action, ovpn_vars.ip)


if __name__ == "__main__":
    main()
